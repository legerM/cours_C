/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ETH_HandleTypeDef heth;

UART_HandleTypeDef huart3;

PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_ETH_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_USB_OTG_FS_PCD_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();

	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();

	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
	MX_ETH_Init();
	MX_USART3_UART_Init();
	MX_USB_OTG_FS_PCD_Init();
	/* USER CODE BEGIN 2 */
#include<stdio.h>


	//type Color RGB
	typedef struct{
		int RValue;
		int GValue;
		int BValue;
	}Color;


	//le rgb des couleurs

	const Color red ={255,0,0};
	const Color green={0,255,0};
	const Color blue={0,0,255};
	const Color white={255,255,255};
	const Color purple={255,0,255};
	const Color yellow={255,255,0};
	const Color black={0,0,0};

	void setLedColor(const unsigned int row,
			const unsigned int col,
			const unsigned int red,
			const unsigned int green,
			const unsigned int blue) {
		char message[11];
		sprintf(message, "R%d%d%2x%2x%2x\n", row, col, red, green, blue);
		HAL_UART_Transmit(&huart3, (uint8_t*)message, strlen(message), 10);
		HAL_Delay(200);

	}

	//fonction qui incremente chaque colone de led
	void setledline(Color **matrice,int tabsize){
		for(int row=0; row< tabsize;row++){
			for(int col=0;col<tabsize;col++){
				setLedColor((row),(col),matrice[row][col].RValue,matrice[row][col].GValue,matrice[row][col].BValue);
			}
		}

	}
	void setsmiley(int tabsize){
		Color number=black;
		Color background=white;
		Color tabline_1[7]={background,background,yellow,yellow,yellow,background,background};
		Color tabline_2[7]={background,yellow,yellow,yellow,yellow,yellow,background};
		Color tabline_3[7]={yellow,yellow,number,yellow,number,yellow,yellow};
		Color tabline_4[7]={yellow,yellow,yellow,yellow,yellow,yellow,yellow};
		Color tabline_5[7]={yellow,number,yellow,yellow,yellow,number,yellow};
		Color tabline_6[7]={background,yellow,number,number,number,yellow,background};
		Color tabline_7[7]={background,background,yellow,yellow,yellow,background,background};

		Color * matrice[7]={tabline_1,tabline_2,tabline_3,tabline_4,tabline_5,tabline_6,tabline_7};
		setledline(matrice,tabsize);

	}
	//fonction qui affiche des nombre en decomptant
	void setcountdown(int tabsize){
		Color background =black;
		Color number;
		for (int decompte = 9;decompte >=0;decompte --){
			if(decompte == 9){
				number=green;
				Color tabline_1[7]={background,background,number,number,number,background,background};
				Color tabline_2[7]={background,number,background,background,background,number,background};
				Color tabline_3[7]={background,number,background,background,background,number,background};
				Color tabline_4[7]={background,background,number,number,number,number,background};
				Color tabline_5[7]={background,background,background,background,background,number,background};
				Color tabline_6[7]={background,background,background,background,background,number,background};
				Color tabline_7[7]={background,background,number,number,number,number,background};

				Color * matrice[7]={tabline_1,tabline_2,tabline_3,tabline_4,tabline_5,tabline_6,tabline_7};
				setledline(matrice,tabsize);
			}
			if(decompte == 8){
				number=white;
				Color tabline_1[7]={background,background,number,number,number,background,background};
				Color tabline_2[7]={background,number,background,background,background,number,background};
				Color tabline_3[7]={background,number,background,background,background,number,background};
				Color tabline_4[7]={background,background,number,number,number,background,background};
				Color tabline_5[7]={background,number,background,background,background,number,background};
				Color tabline_6[7]={background,number,background,background,background,number,background};
				Color tabline_7[7]={background,background,number,number,number,background,background};

				Color * matrice[7]={tabline_1,tabline_2,tabline_3,tabline_4,tabline_5,tabline_6,tabline_7};
				setledline(matrice,tabsize);
			}
			if(decompte == 7){
				number=blue;
				Color tabline_1[7]={background,number,number,number,number,number,background};
				Color tabline_2[7]={background,background,background,background,background,number,background};
				Color tabline_3[7]={background,background,background,background,background,number,background};
				Color tabline_4[7]={background,background,background,background,number,background,background};
				Color tabline_5[7]={background,background,background,number,background,background,background};
				Color tabline_6[7]={background,background,number,background,background,background,background};
				Color tabline_7[7]={background,number,background,background,background,background,background};

				Color * matrice[7]={tabline_1,tabline_2,tabline_3,tabline_4,tabline_5,tabline_6,tabline_7};
				setledline(matrice,tabsize);
			}
			if(decompte == 6){
				number=red;
				Color tabline_1[7]={background,background,number,number,number,background,background};
				Color tabline_2[7]={background,number,background,background,background,number,background};
				Color tabline_3[7]={background,number,background,background,background,background,background};
				Color tabline_4[7]={background,number,number,number,number,background,background};
				Color tabline_5[7]={background,number,background,background,background,number,background};
				Color tabline_6[7]={background,number,background,background,background,number,background};
				Color tabline_7[7]={background,background,number,number,number,background,background};

				Color * matrice[7]={tabline_1,tabline_2,tabline_3,tabline_4,tabline_5,tabline_6,tabline_7};
				setledline(matrice,tabsize);
			}
			if(decompte == 5){
				number=purple;
				Color tabline_1[7]={background,number,number,number,number,number,background};
				Color tabline_2[7]={background,number,background,background,background,background,background};
				Color tabline_3[7]={background,number,background,background,background,background,background};
				Color tabline_4[7]={background,number,number,number,number,background,background};
				Color tabline_5[7]={background,background,background,background,background,number,background};
				Color tabline_6[7]={background,number,background,background,background,number,background};
				Color tabline_7[7]={background,background,number,number,number,background,background};

				Color * matrice[7]={tabline_1,tabline_2,tabline_3,tabline_4,tabline_5,tabline_6,tabline_7};
				setledline(matrice,tabsize);
			}
			if(decompte == 4){
				number=yellow;
				Color tabline_1[7]={background,background,background,background,number,background,background};
				Color tabline_2[7]={background,background,background,number,number,background,background};
				Color tabline_3[7]={background,background,number,background,number,background,background};
				Color tabline_4[7]={background,number,number,number,number,number,background};
				Color tabline_5[7]={background,background,background,background,number,background,background};
				Color tabline_6[7]={background,background,background,background,number,background,background};
				Color tabline_7[7]={background,background,background,background,number,background,background};

				Color * matrice[7]={tabline_1,tabline_2,tabline_3,tabline_4,tabline_5,tabline_6,tabline_7};
				setledline(matrice,tabsize);
			}
			if(decompte == 3){
				number=black;
				background=white;
				Color tabline_1[7]={background,background,number,number,number,background,background};
				Color tabline_2[7]={background,number,background,background,background,number,background};
				Color tabline_3[7]={background,background,background,background,background,number,background};
				Color tabline_4[7]={background,background,background,number,number,number,background};
				Color tabline_5[7]={background,background,background,background,background,number,background};
				Color tabline_6[7]={background,number,background,background,background,number,background};
				Color tabline_7[7]={background,background,number,number,number,background,background};

				Color * matrice[7]={tabline_1,tabline_2,tabline_3,tabline_4,tabline_5,tabline_6,tabline_7};
				setledline(matrice,tabsize);
			}
			if(decompte == 2){
				number=blue;
				background=black;
				Color tabline_1[7]={background,background,number,number,number,background,background};
				Color tabline_2[7]={background,number,background,background,background,number,background};
				Color tabline_3[7]={background,background,background,background,background,number,background};
				Color tabline_4[7]={background,background,background,background,number,background,background};
				Color tabline_5[7]={background,background,background,number,background,background,background};
				Color tabline_6[7]={background,background,number,background,background,background,background};
				Color tabline_7[7]={background,number,number,number,number,number,background};

				Color * matrice[7]={tabline_1,tabline_2,tabline_3,tabline_4,tabline_5,tabline_6,tabline_7};
				setledline(matrice,tabsize);
			}
			if(decompte == 1){
				number=green;
				Color tabline_1[7]={background,background,background,background,number,background,background};
				Color tabline_2[7]={background,background,background,number,number,background,background};
				Color tabline_3[7]={background,background,number,background,number,background,background};
				Color tabline_4[7]={background,number,background,background,number,background,background};
				Color tabline_5[7]={background,background,background,background,number,background,background};
				Color tabline_6[7]={background,background,background,background,number,background,background};
				Color tabline_7[7]={background,background,background,background,number,background,background};

				Color * matrice[7]={tabline_1,tabline_2,tabline_3,tabline_4,tabline_5,tabline_6,tabline_7};
				setledline(matrice,tabsize);
			}
			if(decompte == 0){
				number=black;
				background=white;
				Color tabline_1[7]={background,background,yellow,yellow,yellow,background,background};
				Color tabline_2[7]={background,yellow,yellow,yellow,yellow,yellow,background};
				Color tabline_3[7]={yellow,yellow,number,yellow,number,yellow,yellow};
				Color tabline_4[7]={yellow,yellow,yellow,yellow,yellow,yellow,yellow};
				Color tabline_5[7]={yellow,number,yellow,yellow,yellow,number,yellow};
				Color tabline_6[7]={background,yellow,number,number,number,yellow,background};
				Color tabline_7[7]={background,background,yellow,yellow,yellow,background,background};

				Color * matrice[7]={tabline_1,tabline_2,tabline_3,tabline_4,tabline_5,tabline_6,tabline_7};
				setledline(matrice,tabsize);
			}

			sleep(4);
			setsmiley(tabsize);
		}


	}
	int main(void){
		int tabsize=7;


		setcountdown(tabsize);











		return 0;
	}

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
	}
	/* USER CODE END 3 */
}

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
	RCC_OscInitStruct.PLL.PLLM = 4;
	RCC_OscInitStruct.PLL.PLLN = 168;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = 7;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
	{
		Error_Handler();
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
	{
		Error_Handler();
	}
}

/**
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void)
{

	/* USER CODE BEGIN ETH_Init 0 */

	/* USER CODE END ETH_Init 0 */

	/* USER CODE BEGIN ETH_Init 1 */

	/* USER CODE END ETH_Init 1 */
	heth.Instance = ETH;
	heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
	heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
	heth.Init.MACAddr[0] =   0x00;
	heth.Init.MACAddr[1] =   0x80;
	heth.Init.MACAddr[2] =   0xE1;
	heth.Init.MACAddr[3] =   0x00;
	heth.Init.MACAddr[4] =   0x00;
	heth.Init.MACAddr[5] =   0x00;
	heth.Init.RxMode = ETH_RXPOLLING_MODE;
	heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
	heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;

	/* USER CODE BEGIN MACADDRESS */

	/* USER CODE END MACADDRESS */

	if (HAL_ETH_Init(&heth) != HAL_OK)
	{
		Error_Handler();
	}
	/* USER CODE BEGIN ETH_Init 2 */

	/* USER CODE END ETH_Init 2 */

}

/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{

	/* USER CODE BEGIN USART3_Init 0 */

	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
	huart3.Init.BaudRate = 115200;
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
	huart3.Init.StopBits = UART_STOPBITS_1;
	huart3.Init.Parity = UART_PARITY_NONE;
	huart3.Init.Mode = UART_MODE_TX_RX;
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
	if (HAL_UART_Init(&huart3) != HAL_OK)
	{
		Error_Handler();
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}

/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void)
{

	/* USER CODE BEGIN USB_OTG_FS_Init 0 */

	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
	hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
	hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
	{
		Error_Handler();
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}

/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
	GPIO_InitTypeDef GPIO_InitStruct = {0};

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
	__HAL_RCC_GPIOH_CLK_ENABLE();
	__HAL_RCC_GPIOA_CLK_ENABLE();
	__HAL_RCC_GPIOB_CLK_ENABLE();
	__HAL_RCC_GPIOD_CLK_ENABLE();
	__HAL_RCC_GPIOG_CLK_ENABLE();

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
 * @brief  Reports the name of the source file and the source line number
 *         where the assert_param error has occurred.
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line)
{ 
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
