/*
 * game_p4.c
 *
 *  Created on: Mar 30, 2020
 *      Author: mickaell
 */
#include "FIFO.h"
#include "leds_control.h"
#include "thread.h"
#include "game_p4.h"
#include <stdint.h>
#include <stdio.h>
//

int8_t matrix[COL_COUNT][LINE_COUNT ];
int8_t g_token_top_selector = 3;
extern int8_t active_player;

////initialise la matrice
void gp4_init(void) {
	g_token_top_selector=3;
	active_player= PLAYER_1;
	clear_matrix();
}
////
//matrice vide
void clear_matrix(void) {

	for (int8_t row = 0; row < LINE_COUNT; row++) {
		for (int8_t col = 0; col < COL_COUNT; col++) {
			matrix[col][row] = EMPTY_SPACE;
		}
	}
}
//
//affiche la top line
void top_line_display(void) {
	printf("TOP     : ");
	for (int8_t col = 0; col < COL_COUNT; col++) {
		if (col == g_token_top_selector ) {
			printf("%d ", active_player);
		} else {
			printf("%d ", EMPTY_SPACE);
		}
	}
	printf("\n");
}
//
//affiche la matrice
void diplay_matrix(void) {

	for (int8_t row = 0; row < LINE_COUNT; row++) {
		printf("Ligne %d : ", row );
		for (int8_t col = 0; col < COL_COUNT; col++) {
			printf("%d ", matrix[col][row]);
		}
		printf("\n");
	}
}

//affiche le jeu
void gp4_display(void) {
	top_line_display();
	diplay_matrix();

}
//
//deplace le jeton du joueur vers la droite et si il arrive en but��e de droite se retrouve tout a gauche
pos_token_played_t  gp4_move_right(void) {
	pos_token_played_t pos_token;
	pos_token.beg_position.c = g_token_top_selector;
	pos_token.beg_position.l = 0;
	g_token_top_selector++;
	if (g_token_top_selector > (COL_COUNT)) {
		g_token_top_selector = 0;
	}
	pos_token.end_position.c = g_token_top_selector;
	pos_token.end_position.l = 0;
	pos_token.is_ok = 1;
	return pos_token;

}

//deplace le jeton du joueur vers la gauche et si il arrive en but��e se retrouve tout a droite
pos_token_played_t  gp4_move_left(void) {
	pos_token_played_t pos_token;
	pos_token.beg_position.c = g_token_top_selector;
	pos_token.beg_position.l = 0;
	g_token_top_selector--;
	if (g_token_top_selector < 0) {
		g_token_top_selector = COL_COUNT - 1 ;

	}
	pos_token.end_position.c = g_token_top_selector;
	pos_token.end_position.l = 0;
	pos_token.is_ok = 1;
	return pos_token;

}

winner_t check_winner_vertically(void){
	pos_token_played_t pos_token;
	int8_t check_token = 0, i, block_start, /*block_start_l*/ block_end, /* block_end_l,*/
			c = pos_token.end_position.c, l = pos_token.end_position.l, temp_min, temp_max;
	block_start = l + 3 - LINE_COUNT;
	block_end = l - 3 + LINE_COUNT;
	if (block_start < 0) {
		block_start = 0;
	} else if (block_end >= LINE_COUNT) {
		block_end = MATRIX_HEIGHT -1;
	}
	for ( i = block_start ; i = block_end ; i++ ) {
		if (matrix[g_token_top_selector][i] == active_player) {
			winner_t.win_position[check_token].c = g_token_top_selector;
			winner_t.win_position[check_token].l = i;
			check_token+=1;
		} else {
			check_token = 0;
		}
		if (check_token == 4) {
			i = block_end;
			winner.status = stop_winner;
			winner.win_player = active_player;
			winner.win_type = green;
		}
	}
}
}
pos_token_played_t gp4_play_token(void){
	int8_t play_line = LINE_COUNT -1;
	while (matrix[g_token_top_selector][play_line] != EMPTY_SPACE){
		play_line -= 1;
	}
	matrix[g_token_top_selector][play_line] = active_player;
	pos_token_played_t token_played;
	token_played.is_ok = true;
	token_played.beg_position.c = g_token_top_selector;
	token_played.beg_position.l = 0;
	token_played.end_position.c = g_token_top_selector ;
	token_played.end_position.l = play_line+1;
	check_winner_horizontally();
	return token_played;
}


//valide le coup jouer par le joueur et verifie si il y a un jetons pos�� avant de valid��
//pos_token_played_t  gp4_play_token(void) {
//	pos_token_played_t pos_token;
//	pos_token.beg_position.c = g_token_top_selector;
//	pos_token.beg_position.l = 0;
//	pos_token.end_position.c = g_token_top_selector;
//	if (matrix[g_token_top_selector ][LINE_COUNT - 1] == EMPTY_SPACE) {
//		matrix[g_token_top_selector ][LINE_COUNT - 1] = active_player;
//		pos_token.end_position.l = LINE_COUNT - 1 ;
//	}
//	else {
//		for (int8_t row = 0; row < LINE_COUNT; row++) {
//			if (matrix[g_token_top_selector ][row] != EMPTY_SPACE) {
//				matrix[g_token_top_selector ][row - 1 ] = active_player;
//				pos_token.end_position.l = row - 1 ;
//				return pos_token;
//			}
//		}
//
//	}
//
//	while (matrix[g_token_top_selector ][0] != EMPTY_SPACE) {
//		g_token_top_selector += 1;
//
//		if (g_token_top_selector > (COL_COUNT - 1)) {
//			g_token_top_selector = EMPTY_SPACE;
//		}
//		else if (g_token_top_selector < 0){
//			g_token_top_selector = COL_COUNT - 1 ;
//		}
//
//	}
//	pos_token.is_ok = 1;
//	return pos_token;
//}

//change de joueur
pos_token_played_t gp4_next_player(void) {
	pos_token_played_t pos_token;
	pos_token.beg_position.l = 10;
	pos_token.beg_position.c = 10;
	pos_token.end_position.l = 0;
	if (active_player == PLAYER_1) {
		active_player = PLAYER_2;
		g_token_top_selector = 3;
	} else {
		active_player = PLAYER_1;
		g_token_top_selector = 3;

	}
	while (matrix[g_token_top_selector ][0] != EMPTY_SPACE) {
		g_token_top_selector += 1;

		if (g_token_top_selector > (COL_COUNT - 1)) {
			g_token_top_selector = EMPTY_SPACE;
		}
		else if (g_token_top_selector < 0){
			g_token_top_selector = COL_COUNT - 1 ;
		}

		//			if (matrix[g_token_top_selector][0] != EMPTY_SPACE) {
		//				gp4_move_right();
		//			}


	}
	pos_token.end_position.c = g_token_top_selector;
	return pos_token;
}


//void gp4_test_phase(void) {
//	gp4_display();
//	gp4_move_left();
//	printf("\n");
//	gp4_display();
//	gp4_move_left();
//	printf("\n");
//	gp4_display();
//	gp4_move_left();
//	printf("\n");
//	gp4_display();
//	gp4_play_token();
//	printf("\n");
//	gp4_display();
//	gp4_next_player();
//	printf("\n");
//	gp4_display();
//	gp4_move_left();
//	gp4_move_left();
//	printf("\n");
//	gp4_display();
//	gp4_play_token();
//	gp4_display();
//	printf("\n");
//
//}
